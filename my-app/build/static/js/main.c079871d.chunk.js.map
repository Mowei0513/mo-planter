{"version":3,"sources":["logo.svg","config.js","components/header.js","components/card.js","components/loading.js","service/dateFormat.js","components/simplelineChart.js","components/planter.js","components/footer.js","app.js","serviceWorker.js","index.js"],"names":["module","exports","firebaseConfig","apiKey","process","REACT_APP_API_KEY","authDomain","REACT_APP_AUTH_DOMAIN","databaseURL","REACT_APP_DATABASE_URL","projectId","REACT_APP_PROJECT_ID","storageBucket","REACT_APP_STORAGE_BUCKET","messagingSenderId","REACT_APP_MESSAGING_SENDER_ID","appId","REACT_APP_ID","measurementId","REACT_APP_MEASUREMENT_ID","withStyles","theme","secondaryBar","zIndex","icon","marginRight","spacing","marginBottom","props","classes","Fragment","AppBar","component","className","color","position","Toolbar","Avatar","src","Logo","alt","Typography","variant","paper","maxWidth","margin","overflow","bar","borderBottom","block","display","contentWrapper","label","children","Paper","elevation","Grid","container","alignItems","item","xs","align","Loading","direction","justify","CircularProgress","epochToDate","value","Date","toDate","toLocaleDateString","toDateTime","toLocaleString","withTheme","data","dataXAxisKey","dataYAxisKey","width","height","right","strokeDasharray","dataKey","tickFormatter","labelFormatter","type","stroke","palette","primary","main","Planter","path","orderByKey","limitToLast","isLoading","values","Object","footer","padding","background","Link","href","getFullYear","createTheme","light","dark","typography","h5","fontWeight","fontSize","letterSpacing","shape","borderRadius","mixins","toolbar","minHeight","styles","root","app","flex","flexDirection","ThemeProvider","CssBaseline","firebase","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c079871d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.6d505e4b.svg\";","export const firebaseConfig = {\n    apiKey: process.env.REACT_APP_API_KEY,\n    authDomain: process.env.REACT_APP_AUTH_DOMAIN,\n    databaseURL: process.env.REACT_APP_DATABASE_URL,\n    projectId: process.env.REACT_APP_PROJECT_ID,\n    storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\n    messagingSenderId: process.env.REACT_APP_MESSAGING_SENDER_ID,\n    appId: process.env.REACT_APP_ID,\n    measurementId: process.env.REACT_APP_MEASUREMENT_ID,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types'\nimport AppBar from '@material-ui/core/AppBar'\nimport Toolbar from '@material-ui/core/Toolbar'\nimport Typography from '@material-ui/core/Typography'\nimport { withStyles } from '@material-ui/core/styles'\nimport Avatar from '@material-ui/core/Avatar'\n\nimport Logo from '../logo.svg'\n\nconst styles = (theme) => ({\n    secondaryBar: {\n        zIndex: 0,\n\n    },\n    icon: {\n        marginRight: theme.spacing(2),\n        marginBottom: theme.spacing(2),\n    },\n})\n\nfunction Header(props) {\n    const {classes} = props;\n\n    return (\n        <React.Fragment>\n            <AppBar\n                component=\"div\"\n                className={ classes.secondaryBar }\n                color=\"primary\"\n                position=\"relative\"\n            >\n                <Toolbar>\n                    <Avatar src={ Logo } alt=\"Planter\" className={ classes.icon } />\n                    <Typography color=\"inherit\" variant=\"h5\" component=\"h1\">\n                        Planter\n                    </Typography>\n                </Toolbar>\n            </AppBar>\n        </React.Fragment>\n    );\n}\n\nHeader.propTypes = {\n    classes: PropTypes.object.isRequired,\n}\n\nexport default withStyles(styles)(Header)\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport AppBar from '@material-ui/core/AppBar'\nimport Toolbar from '@material-ui/core/Toolbar'\nimport Typography from '@material-ui/core/Typography'\nimport Paper from '@material-ui/core/Paper'\nimport Grid from '@material-ui/core/Grid'\nimport { withStyles } from '@material-ui/core/styles'\n\nconst styles = (theme) => ({\n    paper: {\n        maxWidth: 936,\n        margin: 'auto',\n        overflow: 'hidden',\n        marginBottom: 40,\n    },\n    bar: {\n        borderBottom: '1px solid rgba(0, 0, 0, 0.12)',\n    },\n    block: {\n        display: 'block',\n    },\n    contentWrapper: {\n        margin: '16px',\n    },\n})\n\nfunction Card(props) {\n    const {classes, icon, label, children} = props;\n\n    return (\n        <Paper className={ classes.paper }>\n            <AppBar className={ classes.bar } position=\"static\" color=\"default\" elevation={ 0 }>\n                <Toolbar>\n                    <Grid container spacing={ 2 } alignItems=\"center\">\n                        <Grid item>\n                            <div className={ classes.block }>\n                                { icon }\n                            </div>\n                        </Grid>\n                        <Grid item xs>\n                            <Typography color=\"textSecondary\" align=\"left\">\n                                { label }\n                            </Typography>\n                        </Grid>\n                    </Grid>\n                </Toolbar>\n            </AppBar>\n            <div className={ classes.contentWrapper }>\n                { children }\n            </div>\n        </Paper>\n    )\n}\n\nCard.propTypes = {\n    classes: PropTypes.object.isRequired,\n    icon: PropTypes.element.isRequired,\n    label: PropTypes.string.isRequired,\n}\n\nexport default withStyles(styles)(Card)\n","import React from 'react'\nimport CircularProgress from '@material-ui/core/CircularProgress'\nimport Grid from '@material-ui/core/Grid'\n\nexport default function Loading() {\n    return (\n        <Grid\n            container\n            direction=\"column\"\n            justify=\"center\"\n            alignItems=\"center\"\n        >\n            <Grid item xs>\n                <CircularProgress color=\"secondary\" />\n            </Grid>\n        </Grid>\n    )\n}\n","function epochToDate(value) {\n    return new Date(value * 1000)\n}\n\nexport function toDate(value) {\n    return epochToDate(value).toLocaleDateString()\n}\n\nexport function toDateTime(value) {\n    return epochToDate(value).toLocaleString()\n}\n","import { CartesianGrid, Legend, Line, LineChart, ResponsiveContainer, Tooltip, XAxis, YAxis } from 'recharts'\nimport { toDate, toDateTime } from '../service/dateFormat'\nimport React from 'react'\nimport withTheme from '@material-ui/styles/withTheme'\nimport PropTypes from 'prop-types'\n\nfunction SimpleLineChart(props) {\n\n    const {theme, data, dataXAxisKey, dataYAxisKey} = props\n\n    return (\n        <ResponsiveContainer width=\"100%\" height={ 225 }>\n            <LineChart data={ data } margin={ {right: 32} }>\n                <CartesianGrid strokeDasharray=\"3 3\" />\n                <XAxis dataKey={ dataXAxisKey } tickFormatter={ toDate } />\n                <YAxis />\n                <Tooltip labelFormatter={ toDateTime } />\n                <Legend />\n                <Line type=\"monotone\" dataKey={ dataYAxisKey } stroke={ theme.palette.primary.main } />\n            </LineChart>\n        </ResponsiveContainer>\n    )\n}\n\nSimpleLineChart.propTypes = {\n    theme: PropTypes.object.isRequired,\n    data: PropTypes.arrayOf(PropTypes.object).isRequired,\n    dataXAxisKey: PropTypes.string.isRequired,\n    dataYAxisKey: PropTypes.string.isRequired,\n}\n\nexport default withTheme(SimpleLineChart)\n\n","import React from 'react'\nimport BarChartIcon from '@material-ui/icons/BarChart'\nimport { FirebaseDatabaseNode } from '@react-firebase/database'\n\nimport Card from './card'\nimport Loading from './loading'\nimport SimpleLineChart from './simplelineChart'\n\n\nfunction Planter() {\n\n    return (\n        <FirebaseDatabaseNode path={ 'planters/planter-1' } orderByKey={ 'yes' } limitToLast={ 25 }>\n            {\n                data => {\n                    if (data.isLoading || !data.value) return <Loading />\n\n                    const values = Object.values(data.value)\n\n                    return (\n                        <React.Fragment>\n                            <Card label={ 'Moisture' } icon={ <BarChartIcon /> }>\n                                <SimpleLineChart data={ values } dataXAxisKey=\"epoch\"\n                                                 dataYAxisKey=\"moisture\" />\n                            </Card>\n\n                            <Card label={ 'Temperature' } icon={ <BarChartIcon /> }>\n                                <SimpleLineChart data={ values } dataXAxisKey=\"epoch\"\n                                                 dataYAxisKey=\"temperature\" />\n                            </Card>\n\n                            <Card label={ 'Humidity' } icon={ <BarChartIcon /> }>\n                                <SimpleLineChart data={ values } dataXAxisKey=\"epoch\"\n                                                 dataYAxisKey=\"humidity\" />\n                            </Card>\n                        </React.Fragment>\n                    )\n                }\n            }\n        </FirebaseDatabaseNode>\n    )\n}\n\nexport default (Planter)\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { withStyles } from '@material-ui/core/styles'\nimport Typography from '@material-ui/core/Typography'\nimport Link from '@material-ui/core/Link'\n\nconst styles = (theme) => ({\n    footer: {\n        padding: theme.spacing(2),\n        background: '#eaeff1',\n    },\n});\n\nfunction Footer(props) {\n    const {classes} = props\n\n    return (\n        <footer className={ classes.footer }>\n            <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\n                { 'Copyright © ' }\n                <Link color=\"inherit\" href=\"https://github.com/darkowl91/planter\">\n                    Planter\n                </Link>{ ' ' }\n                { new Date().getFullYear() }\n                { '.' }\n            </Typography>\n        </footer>\n    )\n}\n\nFooter.propTypes = {\n    classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(Footer)\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { createTheme, ThemeProvider, withStyles } from '@material-ui/core/styles'\nimport CssBaseline from '@material-ui/core/CssBaseline'\n\nimport 'firebase/database';\nimport * as firebase from 'firebase/app'\nimport { FirebaseDatabaseProvider } from '@react-firebase/database'\nimport { firebaseConfig } from './config'\n\nimport Header from './components/header'\nimport Planter from './components/planter'\nimport Footer from './components/footer'\n\n\nconst theme = createTheme({\n    palette: {\n        type: 'light',\n        primary: {\n            light: '#63ccff',\n            main: '#009be5',\n            dark: '#006db3',\n        },\n    },\n    typography: {\n        h5: {\n            fontWeight: 500,\n            fontSize: 26,\n            letterSpacing: 0.5,\n        },\n    },\n    shape: {\n        borderRadius: 8,\n    },\n    mixins: {\n        toolbar: {\n            minHeight: 65,\n        },\n    },\n})\n\n\nconst styles = {\n    root: {\n        display: 'flex',\n        minHeight: '100vh',\n    },\n    app: {\n        flex: 1,\n        display: 'flex',\n        flexDirection: 'column',\n    },\n    main: {\n        flex: 1,\n        padding: theme.spacing(6, 4),\n        background: '#eaeff1',\n    },\n}\n\n\nfunction App(props) {\n\n    const {classes} = props\n\n    return (\n        <ThemeProvider theme={ theme }>\n            <div className={ classes.root }>\n                <CssBaseline />\n                <div className={ classes.app }>\n                    <Header />\n                    <main className={ classes.main }>\n                        <FirebaseDatabaseProvider firebase={ firebase } { ...firebaseConfig }>\n                            <Planter />\n                        </FirebaseDatabaseProvider>\n                    </main>\n                    <Footer />\n                </div>\n            </div>\n        </ThemeProvider>\n    )\n}\n\nApp.propTypes = {\n    classes: PropTypes.object.isRequired,\n}\n\nexport default withStyles(styles)(App)","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\nexport function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${ process.env.PUBLIC_URL }/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                        'worker. To learn more, visit https://bit.ly/CRA-PWA',\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: {'Service-Worker': 'script'},\n    })\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (\n                response.status === 404 ||\n                (contentType != null && contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.',\n            );\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready\n            .then(registration => {\n                registration.unregister();\n            })\n            .catch(error => {\n                console.error(error.message);\n            });\n    }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './app'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root'),\n)\n\nserviceWorker.unregister()\n"],"sourceRoot":""}